<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_building_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize building height
height = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase height and then check level completion

// Increase height


// Check level completion
inst = instance_find(obj_create_tutorial_level, 0);
with (inst) 
{

    if (other.height != grid_size) 
    {
        other.height++;
    }
    else 
    {
        other.height = 1;
    }
    
    switch (other.height) 
    {
        case 1:
          other.sprite_index = spr_building_1;
          break;
        case 2:
          other.sprite_index = spr_building_2;
          break;
        case 3:
          other.sprite_index = spr_building_3;
          break;
        case 4:
          other.sprite_index = spr_building_4;
          break;
        case 5:
          other.sprite_index = spr_building_5;
          break;
    }
    
    // Increase the height in guessed_buildings
    buildings_guessed[other.i, other.j] = other.height;
    
    var indicator_up_correct;
    var indicator_down_correct;
    var indicator_left_correct;
    var indicator_right_correct;
    var unicity_correct;
    indicator_up_correct = true;
    indicator_down_correct = true;
    indicator_left_correct = true;
    indicator_right_correct = true;
    unicity_correct = true;
    
    for (var i = 0; i &lt; grid_size; i++) 
    { 
        temp = 0;
        temp_max = 0;
        for (var j = 0; j &lt; grid_size; j++) 
        {
            if (buildings_guessed[i, j] &gt; temp_max) 
            {
                temp_max = buildings_guessed[i, j];
                temp++;
            }
        }
        
        if (indicator_up[i] != temp) 
        {
            indicator_up_correct = false;
        }
    }
    
    for (var i = 0; i &lt; grid_size; i++) 
    { 
        temp = 0;
        temp_max = 0;
        for (var j = grid_size-1; j &gt;= 0; j--) 
        {
            if (buildings_guessed[i, j] &gt; temp_max) 
            {
                temp_max = buildings_guessed[i, j];
                temp++;
            }
        }
        
         if (indicator_down[i] != temp) 
         {
            indicator_down_correct = false;
        }
    }
    
    for (var j = 0; j &lt; grid_size; j++) 
    { 
        temp = 0;
        temp_max = 0;
        for (var i = 0; i &lt; grid_size; i++) 
        {
            if (buildings_guessed[i, j] &gt; temp_max) 
            {
                temp_max = buildings_guessed[i, j];
                temp++;
            }
        }
        
        if (indicator_left[j] != temp) 
        {
            indicator_left_correct = false;
        }
    }
    
    for (var j = 0; j &lt; grid_size; j++) 
    { 
        temp = 0;
        temp_max = 0;
        for (var i = grid_size-1; i &gt;= 0; i--) 
        {
            if (buildings_guessed[i, j] &gt; temp_max) 
            {
                temp_max = buildings_guessed[i, j];
                temp++;
            }
        }
        
        if (indicator_right[j] != temp) 
        {
            indicator_right_correct = false;
        }
    }
    
    // Level complete
    if (indicator_up_correct &amp;&amp; indicator_down_correct &amp;&amp; indicator_left_correct &amp;&amp; indicator_right_correct &amp;&amp; scr_check_uniqueness_array(buildings_guessed)) 
    {
        if ini_section_exists("player")
        {
            
            ini_write_real("player", "played_tutorial", 1);
            show_debug_message(string(ini_read_real("player", "played_tutorial", 0)))
            
            room_goto(room_transition);
        }
    }
    else
    {
        
        
    }
    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
