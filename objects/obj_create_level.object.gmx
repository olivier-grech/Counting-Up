<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Génère les tableaux

buildings[0, 0] = 0;
buildings_guessed[0, 0] = 0;
indicator_left[0] = 0; 
indicator_right[0] = 0; 
indicator_up[0] = 0; 
indicator_down[0] = 0; 

var temp;
var temp_max;
var first_column;
var available_numbers_list = ds_list_create();



// Grids for save management
save_grid = ds_grid_create(grid_size, grid_size);

// Initialize the buildings array
for (var i = 0; i &lt; grid_size; i++) {
    for (var j = 0; j &lt; grid_size; j++) {
        buildings[i, j] = 0;
        buildings_guessed[i, j] = 1;
    }
}

// Check for prior existence of the buildings array
if (ini_read_string("player", "save_grid_"+string(grid_size), "") != "") 
{
    show_debug_message("Previous level exists!");
    ds_grid_read(save_grid, ini_read_string("player", "save_grid_"+string(grid_size), ""));
    for (var i = 0; i &lt; grid_size; i++) {
        for (var j = 0; j &lt; grid_size; j++) {
            buildings[i, j] = ds_grid_get(save_grid, i, j);;
        }
    }
    
    ds_grid_destroy(save_grid);
}
else
{
    show_debug_message("Previous level doesn't exists...");
    // Regenerate the random seed
    randomize();
    
    //Create the first column
    for (var i = 0; i &lt; grid_size; i++) {
        first_column[i] = i+1; //Numbers from 1 to grid_size
    }
    
    first_column = scr_shuffle_array(first_column, grid_size);
    
    for (var i = 0; i &lt; grid_size; i++) {
       buildings[0, i] = first_column[i];
    }
    
    //Create available number list
    for (var i = 1; i &lt; grid_size; i++) { 
        for (var j = 0; j &lt; grid_size; j++) {
            
            //Generate a list with value from 1 to grid_size
            ds_list_clear(available_numbers_list);
            
            for (var a = 0; a &lt; grid_size; a++) {
                ds_list_add(available_numbers_list, a+1);
            }
            
            for (var a = 0; a &lt; i; a++) {
                temp = ds_list_find_index(available_numbers_list, buildings[a, j]);
                if (temp != -1) {
                    ds_list_delete(available_numbers_list, temp);
                }
            }
            
            for (var a = 0; a &lt; j; a++) {
                temp = ds_list_find_index(available_numbers_list, buildings[i, a]);
                if (temp != -1) {
                    ds_list_delete(available_numbers_list, temp);
                }
            }
            
            ds_list_shuffle(available_numbers_list);
            if (ds_list_find_value(available_numbers_list, 0) != undefined) {
                buildings[i, j] = ds_list_find_value(available_numbers_list, 0);
            }
            else {
                j = grid_size;
                i--;
            }
            
        }
    }
    
    // Create a temporary list from the buildings array then delete it. 
    save_grid = ds_grid_create(grid_size, grid_size);
    for (var i = 0; i &lt; grid_size; i++) {
        for (var j = 0; j &lt; grid_size; j++) {
            ds_grid_set(save_grid, i, j, buildings[i, j]);
    
        }
    }
    save_grid_as_string = ds_grid_write(save_grid);
    ini_write_string("player", "save_grid_"+string(grid_size), save_grid_as_string);
    ds_grid_destroy(save_grid);
}

//Create indicators showing the number of visible buildings
for (var i = 0; i &lt; grid_size; i++) { 
    temp = 0;
    temp_max = 0;
    for (var j = 0; j &lt; grid_size; j++) {
        if (buildings[i, j] &gt; temp_max) {
            temp_max = buildings[i, j];
            temp++;
        }
    }
    indicator_up[i] = temp;
}

for (var i = 0; i &lt; grid_size; i++) { 
    temp = 0;
    temp_max = 0;
    for (var j = grid_size-1; j &gt;= 0; j--) {
        if (buildings[i, j] &gt; temp_max) {
            temp_max = buildings[i, j];
            temp++;
        }
    }
    indicator_down[i] = temp;
}

for (var j = 0; j &lt; grid_size; j++) { 
    temp = 0;
    temp_max = 0;
    for (var i = 0; i &lt; grid_size; i++) {
        if (buildings[i, j] &gt; temp_max) {
            temp_max = buildings[i, j];
            temp++;
        }
    }
    indicator_left[j] = temp;
}

for (var j = 0; j &lt; grid_size; j++) { 
    temp = 0;
    temp_max = 0;
    for (var i = grid_size-1; i &gt;= 0; i--) {
        if (buildings[i, j] &gt; temp_max) {
            temp_max = buildings[i, j];
            temp++;
        }
    }
    indicator_right[j] = temp;
}











</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instancie les tableaux

var manager = instance_find(obj_manager, 0);

var cell_size = manager.small_button_width;
var hor_offset = room_width/2-(2*manager.small_button_gap);
var ver_offset = room_height/2-(2*manager.small_button_gap);
var indicator_up_y = room_height/2-(3.5*manager.small_button_gap);
var indicator_down_y = room_height/2+(3.5*manager.small_button_gap);
var indicator_left_x =  room_width/2-(3.5*manager.small_button_gap);
var indicator_right_x = room_width/2+(3.5*manager.small_button_gap);


//Instantie les batiments
for (var i = 0; i &lt; grid_size; i++) {
    for (var j = 0; j &lt; grid_size; j++) {
        var inst = instance_create(hor_offset+(i*manager.small_button_gap), ver_offset+(j*manager.small_button_gap), obj_building_tutorial);
        inst.i = i;
        inst.j = j;
        inst.image_xscale *= manager.small_button_stretch;
        inst.image_yscale *= manager.small_button_stretch;
    }
}

//Instanciate the up indicators
for (var i = 0; i &lt; grid_size; i++) {
    inst = instance_create(hor_offset+(i*manager.small_button_gap), indicator_up_y, obj_indicator);
    with (inst) {
        height = other.indicator_up[i];
    }
}

//Instanciate the down indicators
for (var i = 0; i &lt; grid_size; i++) {
    inst = instance_create(hor_offset+(i*manager.small_button_gap), indicator_down_y, obj_indicator);
    with (inst) {
        height = other.indicator_down[i];
    }
}

//Instanciate the left indicators
for (var j = 0; j &lt; grid_size; j++) {
    inst = instance_create(indicator_left_x, ver_offset+(j*manager.small_button_gap), obj_indicator);
    with (inst) {
        height = other.indicator_left[j];
    }
}

//Instanciate the right indicators
for (var j = 0; j &lt; grid_size; j++) {
    inst = instance_create(indicator_right_x, ver_offset+(j*manager.small_button_gap), obj_indicator);
    with (inst) {
        height = other.indicator_right[j];
    }
}


for (var i = 0; i &lt; instance_number(obj_indicator); i += 1)
{
   current_indicator = instance_find(obj_indicator, i);
   current_indicator.image_xscale *= manager.small_button_stretch;
   current_indicator.image_yscale *= manager.small_button_stretch;
   
   switch (current_indicator.height) {
 
        case 1:
          current_indicator.sprite_index = spr_indicator_1;
          break;
        case 2:
          current_indicator.sprite_index = spr_indicator_2;
          break;
        case 3:
          current_indicator.sprite_index = spr_indicator_3;
          break;
        case 4:
          current_indicator.sprite_index = spr_indicator_4;
          break;
        case 5:
          current_indicator.sprite_index = spr_indicator_5;
          break;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Call alarm 0
event_perform(ev_alarm, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display level number

level = ini_read_real("player", "current_level_"+string(grid_size), 0);
level = string(level);
draw_set_halign(fa_center);

if(grid_size==4)
{
    level += " - Normal"
}
else if (grid_size==5)
{
    level += " - Hard"
}

draw_text(208, 16, "Level "+level);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
